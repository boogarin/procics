{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Guilherme/Desktop/landing/agendex-landing/app/Globe.js"],"sourcesContent":["\"use client\"\r\n\r\nimport React, { Component } from \"react\";\r\nimport { geoOrthographic } from \"d3-geo\";\r\nimport { timer } from \"d3\";\r\n\r\nimport {\r\n  ComposableMap,\r\n  ZoomableGroup,\r\n  Geographies,\r\n  Geography\r\n} from \"react-simple-maps\";\r\n\r\nclass Globe extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      rotation: [0, 0, 0]\r\n    };\r\n    this.geoProjection = this.geoProjection.bind(this);\r\n    this.startAnimation = this.startAnimation.bind(this);\r\n  }\r\n  geoProjection() {\r\n    return geoOrthographic()\r\n      .translate([800 / 2, 800 / 2])\r\n      .rotate(this.state.rotation)\r\n      .scale(200)\r\n      .clipAngle(90)\r\n      .precision(0.1);\r\n  }\r\n  startAnimation() {\r\n    // const rotation = [\r\n    //   this.state.rotation[0] + 0.18,\r\n    //   this.state.rotation[1] - 0.06,\r\n    //   0\r\n    // ];\r\n    const rotation = [this.state.rotation[0] + 0.2, 0, 0];\r\n    this.setState({ rotation });\r\n  }\r\n  componentDidMount() {\r\n    this.autorotation = timer(this.startAnimation);\r\n  }\r\n  render() {\r\n    return (\r\n      <ComposableMap width={800} height={800} projection={this.projection}>\r\n        <ZoomableGroup>\r\n          <Geographies\r\n            geography=\"https://unpkg.com/world-atlas@1.1.4/world/110m.json\"\r\n            disableoptimization = \"true\"\r\n          >\r\n            {(geos, proj) =>\r\n              geos.map((geo, i) => (\r\n                <Geography\r\n                  key={`${geo.properties.ISO_A3}-${i}`}\r\n                  geography={geo}\r\n                  projection={proj}\r\n                  round\r\n                />\r\n              ))\r\n            }\r\n          </Geographies>\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Globe;\r\n"],"names":[],"mappings":";;;;AAEA;AAEA;AAEA;AAHA;AACA;AAJA;;;;;;AAaA,MAAM,cAAc,qMAAA,CAAA,YAAS;IAC3B,aAAc;QACZ,KAAK;QACL,IAAI,CAAC,KAAK,GAAG;YACX,UAAU;gBAAC;gBAAG;gBAAG;aAAE;QACrB;QACA,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI;QACjD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI;IACrD;IACA,gBAAgB;QACd,OAAO,CAAA,GAAA,4MAAA,CAAA,kBAAe,AAAD,IAClB,SAAS,CAAC;YAAC,MAAM;YAAG,MAAM;SAAE,EAC5B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAC1B,KAAK,CAAC,KACN,SAAS,CAAC,IACV,SAAS,CAAC;IACf;IACA,iBAAiB;QACf,qBAAqB;QACrB,mCAAmC;QACnC,mCAAmC;QACnC,MAAM;QACN,KAAK;QACL,MAAM,WAAW;YAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,GAAG;YAAK;YAAG;SAAE;QACrD,IAAI,CAAC,QAAQ,CAAC;YAAE;QAAS;IAC3B;IACA,oBAAoB;QAClB,IAAI,CAAC,YAAY,GAAG,CAAA,GAAA,2IAAA,CAAA,QAAK,AAAD,EAAE,IAAI,CAAC,cAAc;IAC/C;IACA,SAAS;QACP,qBACE,8OAAC,8JAAA,CAAA,gBAAa;YAAC,OAAO;YAAK,QAAQ;YAAK,YAAY,IAAI,CAAC,UAAU;sBACjE,cAAA,8OAAC,8JAAA,CAAA,gBAAa;0BACZ,cAAA,8OAAC,8JAAA,CAAA,cAAW;oBACV,WAAU;oBACV,qBAAsB;8BAErB,CAAC,MAAM,OACN,KAAK,GAAG,CAAC,CAAC,KAAK,kBACb,8OAAC,8JAAA,CAAA,YAAS;gCAER,WAAW;gCACX,YAAY;gCACZ,KAAK;+BAHA,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG;;;;;;;;;;;;;;;;;;;;IAWpD;AACF;uCAEe"}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}